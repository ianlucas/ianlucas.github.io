{"version":3,"sources":["components/PageIndex.js","utils/Page2Java.js","components/Code.js","components/Clipboard.js","components/PagePage2Java.js","utils/XMLRequest.js","components/PageXMLRequest.js","utils/copy.js","components/Menu.js","App.js","index.js"],"names":["Header","Object","index_esm","Inferno","utils_Page2Java","rawXML","pageClass","pageName","concat","escape","replace","LANGUAGE","xml","java","json","language","hljs","registerLanguage","Code","element","highlightBlock","this","props","lang","content","highlightElement","Clipboard","ClipboardJS","children","data-clipboard-text","bindElement","PagePage2Java","state","step","handleXMLInput","e","_this","setState","target","value","handlePageNameInput","handlePageClassInput","handleProcess","output","Page2Java","process","handleReset","onInput","placeholder","disabled","length","onClick","Code_Code","Clipboard_Clipboard","utils_XMLRequest","XMLRequest","classCallCheck","DOMParser","parseFromString","firstChild","parse","Array","from","map","tagName","rawPages","page","pageElement","getElementsByTagName","hash","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","split","Symbol","iterator","next","done","line","trim","stop","Math","max","indexOf","prop","substring","substr","err","return","_arr","_i","propElement","innerHTML","outerHTML","PageXMLRequest","pages","pageNames","currentPage","currentPageName","handleNextPage","handlePreviousPage","previous","handleInput","handlePageInput","_len","arguments","sources","_key","assign","apply","copy","defineProperty","handleStep1","setXML","getPages","handleStep2","handleBackToStep","bind","validatePages","Menu","items","label","uri","item","dist_index_esm","className","to","exact","activeClassName","App","Menu_Menu","path","component","PageIndex","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.47189028.chunk.js","sourcesContent":["import * as Inferno from 'inferno'\r\nimport './PageIndex.css'\r\n\r\nexport default class Header extends Inferno.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"page-index\">\r\n        <h1>Utilitários para o PEGA do Ian</h1>\r\n        <p>Oi, utilize o menu à esquerda para escolher um utilitário!</p>\r\n        <section>\r\n          <h2 className=\"page-index-subtitle\">Page2Java</h2>\r\n          <p>Converte o XML de uma Page para um script Java que pode recriá-la quando executado dentro de uma Activity.</p>\r\n        </section>\r\n        <section>\r\n          <h2 className=\"page-index-subtitle\">XMLRequest</h2>\r\n          <p>A partir do XML fornecido, monta os dados de acordo com as informações das Pages fornecidas.</p>\r\n        </section>\r\n        <footer className=\"page-index-copy\">\r\n          &copy; 2018, Ian.\r\n        </footer>\r\n      </div>\r\n    )\r\n  }\r\n}","import escape from 'js-string-escape'\r\n\r\nclass Page2Java {\r\n  process(rawXML, pageClass, pageName) {\r\n    const java =\r\n`\r\n// Cria a page ${pageName}\r\nClipboardPage page = tools.createPage(\"${pageClass}\", \"${pageName}\");\r\ntry {\r\n  // Carrega o XML.\r\n  page.adoptXMLForm(\"${escape(rawXML.replace(/\\n/g, ''))}\");\r\n}\r\ncatch (InvalidStreamError e) {\r\n  // Não faz nada se der ruim na leitura do XML.\r\n}\r\n`\r\n    return java\r\n  }\r\n}\r\n\r\nexport default new Page2Java()","import * as Inferno from 'inferno'\r\nimport hljs from 'highlight.js'\r\nimport xml from 'highlight.js/lib/languages/xml'\r\nimport java from 'highlight.js/lib/languages/java'\r\nimport json from 'highlight.js/lib/languages/json'\r\nimport 'highlight.js/styles/vs.css'\r\n\r\nconst LANGUAGE = { xml, java, json }\r\nfor (const language in LANGUAGE) {\r\n  hljs.registerLanguage(language, LANGUAGE[language])\r\n}\r\n\r\nexport default class Code extends Inferno.Component {\r\n  highlightElement(element) {\r\n    if (element === null) {return}\r\n    hljs.highlightBlock(element)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <pre\r\n        className={this.props.lang}\r\n        ref={this.highlightElement}>\r\n        {this.props.content}\r\n      </pre>\r\n    )\r\n  }\r\n}","import * as Inferno from 'inferno'\r\nimport ClipboardJS from 'clipboard'\r\n\r\nexport default class Clipboard extends Inferno.Component {\r\n  bindElement(element) {\r\n    if (!element) {return}\r\n    new ClipboardJS(element)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button ref={this.bindElement} data-clipboard-text={this.props.content}>\r\n        {this.props.children}\r\n      </button>\r\n    )\r\n  }\r\n}","import * as Inferno from 'inferno'\r\nimport Page2Java from '../utils/Page2Java'\r\n\r\nimport Code from './Code'\r\nimport Clipboard from './Clipboard'\r\n\r\nexport default class PagePage2Java extends Inferno.Component {\r\n  state = {\r\n    rawXML: '',\r\n    pageName: '',\r\n    pageClass: '',\r\n    step: 1\r\n  }\r\n\r\n  handleXMLInput = e => {\r\n    this.setState({ rawXML: e.target.value })\r\n  }\r\n\r\n  handlePageNameInput = e => {\r\n    this.setState({ pageName: e.target.value })\r\n  }\r\n\r\n  handlePageClassInput = e => {\r\n    this.setState({ pageClass: e.target.value })\r\n  }\r\n\r\n  handleProcess = () => {\r\n    this.setState({\r\n      step: this.state.step + 1,\r\n      output: Page2Java.process(this.state.rawXML, this.state.pageClass, this.state.pageName)\r\n    }) \r\n  }\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      rawXML: '',\r\n      pageName: '',\r\n      pageClass: '',\r\n      step: 1\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Utilitário Page to Java</h1>\r\n        {this.state.step === 1 ? (<section>\r\n          <h2>1. Qual é o XML da page?</h2>\r\n          <textarea\r\n            value={this.state.rawXML}\r\n            onInput={this.handleXMLInput}\r\n            placeholder=\"Cole aqui o XML!\"\r\n          />\r\n          <h2>2. Qual será a classe dessa page?</h2>\r\n          <input\r\n            value={this.state.pageClass}\r\n            onInput={this.handlePageClassInput}\r\n            placeholder=\"ex.: Data-Potal, Code-Pega-List\"\r\n          />\r\n          <h2>3. Qual será o nome da nova page?</h2>\r\n          <input\r\n            value={this.state.pageName}\r\n            onInput={this.handlePageNameInput}\r\n            placeholder=\"ex.: PageExemplo\"\r\n          />\r\n          <footer class=\"app-footer\">\r\n            <button\r\n              disabled={!this.state.pageName.length || !this.state.rawXML.length}\r\n              onClick={this.handleProcess}>\r\n              Processar\r\n            </button>\r\n          </footer>\r\n        </section>) : null}\r\n\r\n        {this.state.step === 2 ? (<section>\r\n          <h2>4. Copie o resultado e cole em uma step Java de uma Activity!</h2>\r\n          <Code lang=\"java\" content={this.state.output} />\r\n          <footer class=\"app-footer\">\r\n            <Clipboard content={this.state.output}>Copiar Java</Clipboard>\r\n            <button onClick={this.handleReset}>Recomeçar</button>\r\n          </footer>\r\n        </section>) : null}\r\n      </div>\r\n    )\r\n  }\r\n}","class XMLRequest {\r\n  constructor() {\r\n    this.xml = null\r\n  }\r\n\r\n  parse(rawXML) {\r\n    const parser = new DOMParser()\r\n    return parser.parseFromString(rawXML, 'application/xml').firstChild\r\n  }\r\n\r\n  setXML(rawXML) {\r\n    this.xml = this.parse(rawXML)\r\n  }\r\n\r\n  getPages() {\r\n    return Array.from(this.xml.children).map(element => {\r\n      return element.tagName\r\n    })\r\n  }\r\n\r\n  process(rawPages) {\r\n    for (const page in rawPages) {\r\n      const pageElement = (this.xml.getElementsByTagName(page) || [])[0]\r\n      if (!pageElement) {continue}\r\n      const hash = {}\r\n      for (let line of rawPages[page].split('\\n')) {\r\n        line = line.trim()\r\n        if (!line.length) {continue}\r\n        const stop = Math.max(line.indexOf(' '), 0)\r\n        const prop = line.substring(0, stop === 0 ? line.length : stop)\r\n        const value = stop === 0 ? '' : line.substr(line.indexOf(' ') + 1)\r\n        hash[prop] = value\r\n      }\r\n      for (const propElement of Array.from(pageElement.children)) {\r\n        const value = hash[propElement.tagName]\r\n        propElement.innerHTML = value ? value : ''\r\n      }\r\n    }\r\n    return this.xml.outerHTML.replace(/<([^/]+)\\/>/g, '<$1></$1>')\r\n  }\r\n}\r\n\r\nexport default new XMLRequest()","import * as Inferno from 'inferno'\r\nimport XMLRequest from '../utils/XMLRequest'\r\nimport copy from '../utils/copy'\r\n\r\nimport Code from './Code'\r\nimport Clipboard from './Clipboard'\r\n\r\nexport default class PageXMLRequest extends Inferno.Component {\r\n  state = {\r\n    rawXML: '',\r\n    pages: {},\r\n    pageNames: [],\r\n    currentPage: 0,\r\n    currentPageName: null,\r\n    step: 1,\r\n    output: ''\r\n  }\r\n\r\n  handleNextPage = () => {\r\n    const next = this.state.currentPage + 1\r\n    this.setState({\r\n      currentPage: next,\r\n      currentPageName: this.state.pageNames[next]\r\n    })\r\n  }\r\n\r\n  handlePreviousPage = () => {\r\n    const previous = this.state.currentPage - 1\r\n    this.setState({\r\n      currentPage: previous,\r\n      currentPageName: this.state.pageNames[previous]\r\n    })\r\n  }\r\n\r\n  handleInput = e => {\r\n    this.setState({ rawXML: e.target.value })\r\n  }\r\n\r\n  handlePageInput = e => {\r\n    this.setState({\r\n      pages: copy(this.state.pages, {\r\n        [this.state.currentPageName]: e.target.value\r\n      })\r\n    })\r\n  }\r\n\r\n  handleBackToStep(step) {\r\n    this.setState({ step })\r\n  }\r\n\r\n  handleStep1 = () => {\r\n    this.setState({\r\n      step: this.state.step + 1\r\n    })\r\n    XMLRequest.setXML(this.state.rawXML)\r\n    const pages = {}\r\n    const pageNames = XMLRequest.getPages()\r\n    for (const page of pageNames) {\r\n      pages[page] = ''\r\n    }\r\n    this.setState({\r\n      pages,\r\n      pageNames,\r\n      currentPage: 0,\r\n      currentPageName: pageNames[0]\r\n    })\r\n  }\r\n\r\n  handleStep2 = () => {\r\n    this.setState({\r\n      step: this.state.step + 1,\r\n      output: XMLRequest.process(this.state.pages)\r\n    })\r\n  }\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      rawXML: '',\r\n      step: 1\r\n    })\r\n  }\r\n\r\n  validatePages() {\r\n    for (const page in this.state.pages) {\r\n      if (!this.state.pages[page].length) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Utilitário XMLRequest</h1>\r\n\r\n        {this.state.step === 1 ? (<div>\r\n          <h2>1. Qual é o XML?</h2>\r\n          <textarea\r\n            className=\"app-monospace\"\r\n            value={this.state.rawXML}\r\n            onInput={this.handleInput}\r\n            placeholder=\"<Base>\\n  Cole aqui seu XML.\\n</Base>\"\r\n          />\r\n          <ul>\r\n            <li>** Só o clipboard do 6.3 funcionará aqui! **</li>\r\n            <li>Consideraremos que os elementos filhos do elemento raiz são Pages do clipboard.</li>\r\n          </ul>\r\n          <footer class=\"app-footer\">\r\n            <button\r\n              disabled={!this.state.rawXML.length}\r\n              onClick={this.handleStep1}>\r\n              Continuar\r\n            </button>\r\n          </footer>\r\n        </div>) : null}\r\n\r\n        {this.state.step === 2 ? (<div>\r\n          <h2>2.{this.state.currentPage + 1}. Cole o clipboard da page {this.state.currentPageName}.</h2>\r\n          <textarea\r\n            className=\"app-monospace\"\r\n            value={this.state.pages[this.state.currentPageName]}\r\n            onInput={this.handlePageInput}\r\n            placeholder={`ColeAqui Sua page ${this.state.currentPageName}\\nCopieDo Jeito que está no Clipboard`}\r\n          />\r\n          <ul>\r\n            <li>Selecione todo o texto da page no clipboard e cole-a no campo acima.</li>\r\n          </ul>\r\n          <footer class=\"app-footer\">\r\n            <button\r\n              disabled={!this.state.rawXML.length}\r\n              onClick={this.handleBackToStep.bind(this, 1)}>\r\n              Voltar\r\n            </button>\r\n            <button\r\n              disabled={!(this.state.currentPage !== 0)}\r\n              onClick={this.handlePreviousPage}>\r\n              Anterior\r\n            </button>\r\n            <button\r\n              disabled={!(this.state.currentPage < this.state.pageNames.length - 1)}\r\n              onClick={this.handleNextPage}>\r\n              Próxima\r\n            </button>\r\n            <button\r\n              disabled={this.validatePages()}\r\n              onClick={this.handleStep2}>\r\n              Processar\r\n            </button>\r\n          </footer>\r\n        </div>) : null}\r\n\r\n        {this.state.step === 3 ? (<div>\r\n          <h2>3. Copie o resultado!</h2>\r\n          <Code lang=\"xml\" content={this.state.output} />\r\n          <footer class=\"app-footer\">\r\n            <Clipboard content={this.state.output}>\r\n              Copiar XML\r\n            </Clipboard>\r\n            <button onClick={this.handleReset}>\r\n              Recomeçar\r\n            </button>\r\n          </footer>\r\n        </div>) : null}\r\n      </div>\r\n    )\r\n  }\r\n}","export default function copy(...sources) {\r\n  return Object.assign({}, ...sources)\r\n}","import * as Inferno from 'inferno'\r\nimport { NavLink } from 'inferno-router'\r\nimport './Menu.css'\r\n\r\nexport default class Menu extends Inferno.Component {\r\n  state = {\r\n    items: [\r\n      {\r\n        label: 'Início',\r\n        uri: '/',\r\n      },\r\n      {\r\n        label: 'Page2Java',\r\n        uri: '/page-to-java'\r\n      },\r\n      {\r\n        label: 'XMLRequest',\r\n        uri: '/xml-request'\r\n      }\r\n    ]\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <nav class=\"menu\">\r\n        <ul class=\"menu-list\">\r\n          {this.state.items.map(item =>\r\n            (<li activeClassName=\"active\" class=\"menu-item\" key={item.uri}>\r\n              <NavLink className=\"menu-link\" to={item.uri} exact>{item.label}</NavLink>\r\n            </li>)\r\n          )}\r\n        </ul>\r\n      </nav>\r\n    )\r\n  }\r\n}","import * as Inferno from 'inferno'\nimport { HashRouter, Route } from 'inferno-router'\nimport './App.css'\n\nimport PageIndex from './components/PageIndex'\nimport PagePage2Java from './components/PagePage2Java'\nimport PageXMLRequest from './components/PageXMLRequest'\nimport Menu from './components/Menu'\n\nclass App extends Inferno.Component {\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"app\">\n          <div className=\"app-menu\">\n            <Menu />\n          </div>\n          <div className=\"app-page\">\n            <Route path=\"/\" component={PageIndex} exact />\n            <Route path=\"/page-to-java\" component={PagePage2Java} />\n            <Route path=\"/xml-request\" component={PageXMLRequest} />\n          </div>\n        </div>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App;\n","import { render } from 'inferno'\nimport './index.css'\nimport App from './App'\n\nrender(<App />, document.getElementById('root'))"],"sourceRoot":""}